import { Configuration, OpenAIApi } from 'openai';
import { config } from 'dotenv';
import fs from 'fs';
import path from 'path';

class TestGenerator {
  private configuration: Configuration;
  private openai: OpenAIApi;

  constructor() {
    // Read the .env file
    config();
    config({ path: path.join(process.cwd(), '.env.local') });

    // Create a new OpenAI API client configuration
    this.configuration = new Configuration({
      apiKey: process.env.OPENAI_API_KEY!,
    });

    // Create a new OpenAI API client
    this.openai = new OpenAIApi(this.configuration);
  }

  private getFileNameWithoutExtension(filePath: string): string {
    return path.basename(filePath, path.extname(filePath));
  }

  private async generatePrompt(filePath: string): Promise<string> {
    // Read the file contents using the fs module
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const fileName = this.getFileNameWithoutExtension(filePath);

    // Set the file content as the prompt for the API request
    const prompt = `
      Write a TypeScript unit test for the following function:
      ${fileContent}
      The test should import the function from "../${fileName}".
      Test case:
      ###
    `;

    return prompt;
  }

  private async generateTestMessage(prompt: string): Promise<string> {
    // Create a new chat completion, using the GPT-3.5 Turbo model
    const completion = await this.openai.createCompletion({
      model: 'text-davinci-003',
      prompt,
      max_tokens: 2000,
      temperature: 0,
      top_p: 1,
      n: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      stop: ['###'],
    });

    // Print the message generated by the API
    const result = completion.data.choices[0].text;
    console.log('usage ===>', completion.data.usage);

    return result || '';
  }

  private async writeTestMessageToFile(
    filePath: string,
    message: string
  ): Promise<void> {
    // Write the message to a file
    try {
      const dirPath = path.join(path.dirname(filePath), '__test__');
      const fileName = `${this.getFileNameWithoutExtension(filePath)}.test.ts`;

      // Create the output directory if it doesn't exist
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath);
      }

      // Write the message to the output file
      fs.writeFileSync(path.join(dirPath, fileName), message);
      console.log('Message written to file');
    } catch (error) {
      console.error('Error writing message to file:', error);
    }
  }

  async generateTestCase({
    filePath,
  }: {
    filePath: string;
  }): Promise<void> {
    const prompt = await this.generatePrompt(filePath);
    const message = await this.generateTestMessage(prompt);
    await this.writeTestMessageToFile(filePath, message);
  }
}

export default TestGenerator;
